<div id="left">
    <div id="inner">
        <h1 class="text-4xl">Configure your first graph.</h1>
        <p>Choose the type of graph and variables you would like to visualize.</p>
        <form id="graph-configure-form" action="javascript:void(0);">
            <br>
            <h2>Graph Type</h2>
            <div class="input-group" style="padding-top:3%;">
                <select id="graphPicker" class="selectpicker" data-size="4" data-width="100%" required>
                    <optgroup label="2D">
                        <option value="bar" data-size="1">Bar</option>
                        <option value="scatter" data-size="2">Scatter</option>
                    </optgroup>
                    <optgroup label="3D">
                        <option value="bar3d" data-size="3">Bar</option>
                        <option value="scatter3d" data-size="3">Scatter</option>
                    </optgroup>
                    {{!-- <option value="pie" data-size="1">Pie</option> --}}
                    {{!-- <option value="line" data-size="2">Line</option> --}}
                </select>
            </div>
            <br>
            <h2>Variables</h2>
            <div class="input-group" style="padding-top:3%;">
                <select id="variablePicker" class="selectpicker" multiple data-max-options="1" data-width="100%" data-size="5" required>
                    {{!-- <option value="1" data-content="<span class='badge text-bg-dark'>Popularity</span>" selected>Popularity</option> --}}
                    {{!-- <option value="2" data-content="<span class='badge text-bg-dark'>Release Date</span>">Release Date</option> --}}
                    <option class="nonscale" data-unit="duration (ms)" value="duration_ms" data-content="<span class='badge text-bg-dark'>Duration</span>">Duration</option>
                    <option data-unit="danceability score" value="danceability" selected data-content="<span class='badge text-bg-dark'>Danceability</span>">Danceability</option>
                    <option data-unit="energy score" value="energy" data-content="<span class='badge text-bg-dark'>Energy</span>">Energy</option>
                    <option class="nonscale" data-unit="loudness (db)" value="loudness" data-content="<span class='badge text-bg-dark'>Loudness</span>">Loudness</option>
                    <option data-unit="speechiness score" value="speechiness" data-content="<span class='badge text-bg-dark'>Speechiness</span>">Speechiness</option>
                    <option data-unit="acousticness score" value="acousticness" data-content="<span class='badge text-bg-dark'>Acousticness</span>">Acousticness</option>
                    <option data-unit="instrumentalness score" value="instrumentalness" data-content="<span class='badge text-bg-dark'>Instrumentalness</span>">Instrumentalness</option>
                    <option data-unit="liveness score" value="liveness" data-content="<span class='badge text-bg-dark'>Liveness</span>">Liveness</option>
                    <option data-unit="valence score" value="valence" data-content="<span class='badge text-bg-dark'>Valence</span>">Valence</option>
                    <option class="nonscale" data-unit="tempo (bpm)" value="tempo" data-content="<span class='badge text-bg-dark'>Tempo</span>">Tempo</option>
                    <option class="nonscale" data-unit="time signature (beats per bar)" value="time_signature" data-content="<span class='badge text-bg-dark'>Time Signature</span>">Time Signature</option>
                    <option class="nonscale" data-unit="key (pitch class)" value="key" data-content="<span class='badge text-bg-dark'>Key</span>">Key</option>
                    <option class="nonscale" data-unit="mode (0=minor, 1=major)" value="mode" data-content="<span class='badge text-bg-dark'>Mode</span>">Mode</option>
                </select>
            </div>
            <a class="btn btn-spotify-inversed col-8" href="#" onclick="renderGraph()" style="margin-top:5%">Generate Graph</a>
        </form>
    </div>
    <p class="footer">
        <span class="line">What do these variables measure? <a class="underline" href="/learn">Learn more</a>.</span>
    </p>
</div>

<div id="backRight">
    <div id="right" class="overflow-hidden">
        <div class="toast-container position-fixed end-0 p-3" style="z-index: 11; top:56px;">
                <div id="liveToast" class="toast hide text-bg-danger" role="alert" aria-live="assertive" aria-atomic="true" style="margin-bottom: 10px">
                        <div class="toast-body text-center" id="toast-msg-text">
                        
                        </div>
                </div>
            <div id="liveToast2" class="toast hide " style="margin-bottom: 10px" role="alert" aria-live="assertive" aria-atomic="true" data-bs-autohide="false" data-bs-animation="false">
                    <div class="toast-header">
                        <img style="height: 15px;" src="https://cdn-icons-png.flaticon.com/512/174/174872.png" class="rounded me-2" alt="Spotify">
                        <strong class="me-auto">Spotify</strong>
                        <a href="#" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></a>
                    </div>
                    <div class="toast-body" style="color:black">
                        Now playing: <span id="toast-msg-text2"></span>
                    </div>
            </div>
    </div>

        <div id="graph" style="margin-left: 10%; width: 90%;height:60%"> </div>
        <div class="row" style="margin-left: 10%;">
            <div class="col-3">
                <a class="btn btn-spotify-inversed" style="margin-top:5%; border-radius: 100%;"><i class="fa fa-plus"></i></a>
            </div>
            <div class="col-3">
                <a class="btn btn-spotify-inversed" onclick="downloadImage()" style="margin-top:5%; border-radius: 100%;"><i class="fa fa-download"></i></a>
            </div>
            <div class="col-3">
                <a class="btn btn-spotify-inversed" style="margin-top:5%; border-radius: 100%;"><i class="fa fa-share"></i></a>
            </div>
        </div>
    </div>
</div>

{{#section 'script'}}
<script src="https://sdk.scdn.co/spotify-player.js"></script>
<script src="/assets/echarts-gl.min.js"></script>
<script type="application/javascript" id="dynamicScript">
document.body.removeEventListener("wheel", scrollHandler, { passive: false });

var xhr = new XMLHttpRequest();
var myChart;
$.getJSON('/assets/chalk.project.json', function(themeJSON) {
    echarts.registerTheme('chalk', themeJSON);
    myChart = echarts.init(document.getElementById('graph'), themeJSON['theme']);
    myChart.on('click', 'series', function (e) {
        var track_uri = e.data[e.data.length - 1];
        $.ajax({
            'type': 'GET',
            'url': '/api/playback/play?device_id=' + playerId + '&uri=' + encodeURIComponent(track_uri),
            'dataType': 'json'
        })
    });
});

var playerId;
window.onSpotifyWebPlaybackSDKReady = () => {
    $.ajax({
        'type': 'GET',
        'url': '/api/auth/session',
        'dataType': 'json'
    }).done(function(data) {
        const token = data.result.token.access_token;
        player = new Spotify.Player({
            name: 'SmartLists',
            getOAuthToken: cb => { cb(token); },
            volume: 0.5
        });
        player.on('initialization_error', function(e) { console.error(e); });

    // Ready
    player.addListener('ready', ({ device_id }) => {
        console.log('Ready with Device ID', device_id);
        playerId = device_id;
        
        document.getElementById('liveToast2').addEventListener('hide.bs.toast', () => {
            $.ajax({
                    'type': 'GET',
                    'url': '/api/playback/pause?device_id=' + playerId,
                    'dataType': 'json'
                });
        })


    });

    player.addListener('player_state_changed', ({
            position,
            duration,
            paused,
            track_window: { current_track }
            }) => {
            if (paused || duration == position) {
                $('#liveToast2').toast('hide')
            } else {
                const errorToast = document.getElementById('liveToast2');
                const toastMsg = document.getElementById('toast-msg-text2');
                if (current_track.artists.length >= 1) {
                    toastMsg.innerHTML = current_track.name + " - " + current_track.artists[0].name;
                } else {
                    toastMsg.innerHTML = current_track.name;
                }
                const toast = new bootstrap.Toast(errorToast);
                toast.show();
                }
            });

    // Not Ready
    player.addListener('not_ready', ({ device_id }) => {
        console.log('Device ID has gone offline', device_id);
    });

    player.addListener('initialization_error', ({ message }) => {
        console.error(message);
    });

    player.addListener('authentication_error', ({ message }) => {
        console.error(message);
    });

    player.addListener('account_error', ({ message }) => {
        console.error(message);
    });

    player.connect();
});
}


var jsonData;
$(document).ready(function() {
        $.ajax({
            'type': 'GET',
            'url': '/api/playlists/' + findGetParameter('id') + '/metadata',
            'dataType': 'json'
        }).done(function(data) {
            jsonData = data.result;
            barGraph(jsonData, ['danceability'], 'danceability score');
            
        });
        window.onresize = function() {
            myChart.resize();
        };    
    });


    $('#left').ready(function() {
        $('#graphPicker').selectpicker();
        $('#variablePicker').selectpicker({
                multipleSeparator: ' '
            });
            
    });
    $('#graphPicker').on('changed.bs.select', function (e, clickedIndex, isSelected, previousValue) {
        $('#variablePicker').selectpicker('deselectAll');
        $('#variablePicker').selectpicker('destroy');
        var val = $(this).val();
        var optionCount = 1;
        // Set the max number of variables per graph here
        var nonscale = document.querySelectorAll('.nonscale')
        nonscale.forEach(function(element) {
            element.removeAttribute("disabled");
        });
        switch(val) {
            case "bar":
                optionCount = 1;
                break;
            case "scatter":
                optionCount = 2;
                break;
            case "scatter3d":
                optionCount = 3;
                break;
            case "bar3d":
                optionCount = 3;
                nonscale.forEach(function(element) {
                    element.setAttribute("disabled", "disabled");
                });
                break;
            default:
                break;
        }
        $('#variablePicker').selectpicker({
            maxOptions: optionCount,
            multipleSeparator: ' '
        });
    });

    function renderGraph() {
        var graphType = $('#graphPicker').val();
        var variables = $('#variablePicker').val();
        var unit = $('#variablePicker').find(':selected').data('unit');
        // Call graph rendering function here
        switch(graphType) {
            case "bar":
                barGraph(jsonData, variables, unit);
                break;
            case "scatter":
                scatterPlot(jsonData, variables);
                break;
            case "scatter3d":
                scatter3d(jsonData, variables);
                break;
            case "bar3d":
                bar3d(jsonData, variables);
                break;
            default:
                break;
        }
    }
    function downloadImage() {
        var a = document.createElement("a");
        a.href = myChart.getDataURL({ pixelRatio: 2 });
        a.download = "chart.png";
        a.click();
        }

    pjax.refresh();
</script>
{{/section}}